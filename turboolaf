#!/usr/bin/env python3

import json
import time
import datetime
import optparse
import os
import string

from decimal import Decimal
import uuid

def resolve_invoice_dependencies(invoice):
    # TODO: be filled by xhochy
    return invoice

def get_total_price(invoice):
    total_price = Decimal(0)
    for code, product in invoice.items():
        billed_price = Decimal(str(product["price"])) * Decimal(str(product["quantity"]))
        total_price += billed_price
    return total_price

def get_qif(invoice):
    qif = "!Type:Cash\n"
    qif += "T" + str(get_total_price(invoice)) + "\n"
    qif += "D" + time.strftime("%d") + "/" + time.strftime("%m") + "' " + time.strftime("%y") + "\n"
    qif += "MBierminister Verkauf\n"
    qif += "^"
    return qif

def get_invoice_ascii(invoice, width=60):
    invoice_string = ""
    invoice_string += "*" * width + "\n"
    invoice_string += "K1 GetrÃ¤nkeverkauf".center(width) + "\n"
    invoice_string += time.strftime("%d %b %Y %H:%M:%S").center(width) + "\n"
    invoice_string += ("ID: " + invoice_id).center(width) + "\n"
    invoice_string += "*" * width + "\n\n"

    for code, product in invoice.items():
        if product["quantity"] > 0:
            billed_price = Decimal(str(product["price"])) * Decimal(str(product["quantity"]))
            billing_string = str(product["price"]).rjust(5) + \
                    str(" x " + str(product["quantity"])).rjust(6) + \
                    " = " + \
                    str(billed_price).rjust(6)

            name_string = product["name"].ljust(width - len(billing_string))
            invoice_string += name_string + billing_string + "\n"

    invoice_string += "-" * width + "\n"
    invoice_string += "Total:" + str(get_total_price(invoice)).rjust(width - 6) + "\n"

    return invoice_string

def get_entered_items_ascii(invoice):
    entered_items_string = ""
    for code, product in invoice.items():
        if product["quantity"] != 0:
            entered_items_string += str(product["quantity"]).rjust(4) + " x " + product["name"] + "\n"
    entered_items_string += "Total: " + str(get_total_price(invoice))
    return entered_items_string

# add a --file argument and parse the arguments
parser = optparse.OptionParser()
parser.add_option("-f", "--file", dest = "filename", help = "load invoice from SOURCE", metavar = "SOURCE")
(options, args) = parser.parse_args()

# load an invoice from file or, if no file was given, use the default invoice prototype
if options.filename:
    invoice = json.load(open(options.filename))
else:
    invoice = json.load(open("invoice_prototype.olaf"))

print("Welcome to TurboOlaf!")

#TODO: Maybe make this unique...?
invoice_id = str(int(time.time()))

# set the quantity of all products to 0
print(invoice)
for code, product in invoice.items():
    product["quantity"] = 0

previous_product_code = None
while True:
    entered = input("olaf > ")
    # clear immediately and then show the input again
    os.system("clear")
    print("olaf > " + entered)

    # end if an input was given
    if not entered:
        break
    else:
        if entered[0] == '$':
            # the input is a Sonderposten
            try:
                special_product = {}
                special_id = str(uuid.uuid4())
                invoice[special_id]['quantity'] = 1
                try:
                    special_name = entered[1:].split(' ')[1]
                except IndexError:
                    special_name = "Sonderposten"
                special_product['name'] = special_name
                special_product['price'] = Decimal(entered[1:].split(' ')[0])
                previous_product_code = special_id
                # only if nothing of the above failed, write the above
                invoice.update({
                    special_id: special_product
                    })
            except:
                print("Invalid Sonderposten format!")
        else:
            # the input is not a Sonderposten
            if entered[0] in string.ascii_letters:
                # the input starts with a letter and will be followed by a product id
                previous_product_code = None
                for code, product in invoice.items():
                    if code == entered[1:]:
                        previous_product_code = code
                        print("Entered " + invoice[code]["name"])
                        product["quantity"] += 1
                if not previous_product_code:
                    print("Invalid product code " + entered[1:] + " entered")
            else:
                if len(entered) > 10:
                    # a code was scanned
                    for code, product in invoice.items():
                        if code == entered:
                            previous_product_code = code
                            print("Scanned " + invoice[code]["name"])
                            product["quantity"] += 1
                else:
                    # a quantity was entered
                    if previous_product_code:
                        try:
                            invoice[previous_product_code]["quantity"] += int(entered) - 1
                            print("Added another " + str(int(entered) - 1) + " " + invoice[previous_product_code]["name"])
                            previous_product_code = None
                        except ValueError:
                            print("No valid quantity entered")
                    else:
                        print("No previous product entered!")

        # finally, print a list of all scanned items
        print(get_entered_items_ascii(invoice))

print(get_invoice_ascii(invoice))

# TODO: write this out in a sorted manner e.g. yyyy/mm/dd/id.olaf
invoice_file = open("invoices/" + invoice_id + ".json", 'w')
invoice_file.write(json.dumps(invoice, indent=4))
invoice_file.close()

qif_file = open("qif/" + invoice_id + ".qif", 'w')
qif_file.write(get_qif(invoice))
qif_file.close()
